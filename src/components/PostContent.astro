---
import Section from './Section';
---

<Section>
	<div
		class="md-content"
	>
		<slot />
	</div>
</Section>

<style is:global>
	.md-content pre {
		background-color: #cdc8ff0d;
		border-radius: 0.5rem;
		font-size: 0.9rem;
	}

	.md-content code {
		overflow-x: auto;
	}

	.md-content [data-rehype-pretty-code-figure] code {
		padding: 0 !important;
	}
	.md-content pre > code span[data-line] {
		border-left: 0.5rem solid transparent;
		padding: 0 0.5rem;
	}

	.md-content pre > code span:first-of-type {
		border-top-left-radius: 0.5rem;
		border-top-right-radius: 0.5rem;
		padding-top: 0.5rem;
	}
	.md-content pre > code span:last-of-type {
		border-bottom-left-radius: 0.5rem;
		border-bottom-right-radius: 0.5rem;
		padding-bottom: 0.5rem;
	}

	.md-content pre > code .highlighted {
		border-left: 0.5rem solid rgba(209, 213, 219, 0.6) !important;
		background-color: rgba(229, 231, 235, 0.05);
	}
	/** 
     *  data-line-numbers will be enabled on markdown  
     *  with `showLineNumbers` meta string on it
     */
	.md-content pre > code[data-line-numbers] {
		counter-reset: line;
	}
	.md-content pre > code[data-line-numbers] > span[data-line]::before {
		counter-increment: line;
		content: counter(line);
		display: inline-block;
		margin-right: 2rem;
		width: 1rem;
		text-align: left;
		color: #7ca2dfad;
	}
	.md-content pre > code > span[data-line]::before {
		content: '';
		display: inline-block;
		width: 1rem;
		text-align: right;
	}

	/** 
     *  we'll need to adjust the space required 
     *  the number depending on the number of digits 
     */
	.md-content pre > code[data-line-numbers-max-digits='2'] > span[data-line]::before {
		width: 2rem;
	}

	.md-content code[data-line-numbers-max-digits='3'] > span[data-line]::before {
		width: 3rem;
	}
</style>

<script>
	/**
	 * @params {HTMLCollectionOf<HTMLElement>} graphs
	 */
	async function renderDiagrams(graphs: any) {
	  const {default: mermaid} = await import("mermaid")
	  mermaid.initialize({
		startOnLoad: false,
		fontFamily: "var(--sans-font)",
		// @ts-ignore This works, but TS expects a enum for some reason
		theme: window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "default",
	  })

	  for (const graph of graphs) {
		const content = graph.getAttribute("data-content")
		if (!content) continue
		let svg = document.createElement("svg")
		const id = (svg.id = "mermaid-" + Math.round(Math.random() * 100000))
		graph.appendChild(svg)
		mermaid.render(id, content).then(result => {
		  graph.innerHTML = result.svg
		})
	  }
	}

	const graphs = document.getElementsByClassName("mermaid")

	if (document.getElementsByClassName("mermaid").length > 0) {
	  renderDiagrams(graphs);
	}
  </script>